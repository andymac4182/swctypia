// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tsTypeResolver should resolve self contained types 1`] = `
{
  "properties": {
    "test": {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`tsTypeResolver should resolve self contained types 2`] = `
{
  "properties": {
    "test": {
      "properties": {
        "testNested": {
          "type": "number",
        },
      },
      "type": "object",
    },
  },
  "type": "object",
}
`;

exports[`tsTypeResolver should resolve self contained types 3`] = `
{
  "properties": {
    "test": {
      "properties": {
        "testNested": {
          "type": "number",
        },
      },
      "type": "object",
    },
    "test2": {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`tsTypeResolver should resolve self contained types 4`] = `
{
  "type": "string",
}
`;

exports[`tsTypeResolver should resolve self contained types 5`] = `
{
  "type": "number",
}
`;

exports[`tsTypeResolver should resolve self contained types 6`] = `
{
  "type": "boolean",
}
`;

exports[`tsTypeResolver should resolve self contained types 7`] = `
{
  "type": "union",
  "types": [
    {
      "properties": {
        "test": {
          "type": "string",
        },
      },
      "type": "object",
    },
    {
      "properties": {
        "test2": {
          "type": "number",
        },
      },
      "type": "object",
    },
  ],
}
`;

exports[`tsTypeResolver should resolve self contained types 8`] = `
{
  "properties": {
    "test": {
      "type": "string",
    },
    "test2": {
      "type": "number",
    },
  },
  "type": "object",
}
`;

exports[`tsTypeResolver should resolve self contained types 9`] = `
{
  "elementType": {
    "properties": {
      "test": {
        "type": "string",
      },
    },
    "type": "object",
  },
  "type": "array",
}
`;

exports[`tsTypeResolver should resolve self contained types 10`] = `
{
  "type": "tuple",
  "types": [
    {
      "type": "string",
    },
    {
      "type": "number",
    },
  ],
}
`;

exports[`tsTypeResolver should resolve self contained types 11`] = `
{
  "properties": {
    "test": {
      "type": "literal",
      "value": "test",
    },
  },
  "type": "object",
}
`;

exports[`tsTypeResolver should resolve self contained types 12`] = `
{
  "properties": {
    "test": {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`tsTypeResolver should resolve self contained types 13`] = `
{
  "properties": {
    "test": {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`tsTypeResolver should resolve self contained types 14`] = `
{
  "properties": {
    "test": {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`tsTypeResolver should resolve self contained types 15`] = `
{
  "properties": {
    "test": {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`tsTypeResolver should resolve types from another file 1`] = `
{
  "properties": {
    "test": {
      "type": "string",
    },
  },
  "type": "object",
}
`;
